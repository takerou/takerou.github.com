Hello Kyoto Tycoon!
<div style="text-align:right">
PP reading 2010/11/05
きょうと たいくーんを
ちょっとだけ触ってみた
<div>
----
ほんとうにちょっとだけなんです。。。
gitub とか 
presen.jsに殺られてた。。
----
*Kyoto Tycoonとは
<div style="text-align:right;font-size:80%;">
Tokyo Tyrant作者
  平林幹雄さん作の
  キャッシュサーバ
</div>
----
KT consists of the following
- Kyoto Cabinet
- Kyoto Tycoon
<div style="text-align:right;font-size:50%;">
この分け方不適切かな？
</div>
----
ん！？

Tyrant もそんな感じじゃなかった？？

<div style="text-align:right;font-size:50%;">tokyo tyrant & cabinet</div>
----
It's different concept!
- TT is not cache server.
- So TT is not suport expire.
- But KT suport it.
- cacheサーバとしての利便性を追求
<div style="text-align:right;font-size:50%;">実運用しやすいcacheサーバ</div>
----
And 
KT can operate multi DB.
So KT handle KC's multi aspects DB.
----
base function
KC ≒ memcached
-set データをsetしちゃうYO！
-add データをadd。あれば残す
-append 追加。あれば追記。
-increment ++;
and more ...
----
ん！？

memcached もそんな感じじゃなかった？？
----
KT can following!
-list keyの一覧を取得。


<div style="text-align:right;font-size:50%;">より大きな相違点としては</div>
----
KT's concept is

>||
permanent casche server
||<

>||
memcached for permanence
||<
----
-KT is closer in cache than TT


-KT is closer in storage than Memchached
----
Let's begin!
----
KC download & install
>||
$ wget http://fallabs.com/kyotocabinet/pkg/kyotocabinet-1.2.21.tar.gz
$ tar xvzf kyotocabinet-1.2.21.tar.gz
$ cd kyotocabinet-1.2.21/
$ ./configure --prefix=/usr/local/kyotocabinet-1.2.21 && make
$ sudo make install
||<
<div style="text-align:right;font-size:50%;">会社のPCだと超遅い</div>
----
KT download & install
>||
$ wget http://fallabs.com/kyototycoon/pkg/kyototycoon-0.9.4.tar.gz
$ tar xvzf kyototycoon-0.9.4.tar.gz
$ cd kyototycoon-0.9.4/
$ ./configure --prefix=/usr/local/kyototycoon-0.9.4./configure
$ ./configure --prefix=/usr/local/kyototycoon-0.9.4 --with-kc=/usr/local/kyotocabinet-1.2.21 && make
$ sudo make install
||<
<div style="text-align:right;font-size:50%;color:red;">会社のPCだと超遅い</div>
----
KT 起動！
>||
$ cd /usr/local/kyototycoon-0.9.4/
$ ./ktserver
2010-11-05T16:08:20.525549+09:00: [SYSTEM]: ================ [START]: pid=11139
2010-11-05T16:08:20.525928+09:00: [SYSTEM]: opening a database: path=*
2010-11-05T16:08:20.526165+09:00: [SYSTEM]: starting the server
2010-11-05T16:08:20.526319+09:00: [SYSTEM]: server socket opened: expr=:1978 timeout=30.0
2010-11-05T16:08:20.526371+09:00: [SYSTEM]: listening server socket started: fd=3
||<
----
突っ込む&確認&get
>||
$ ./ktremotemgr set key1 value1   ← keyと値をセット
$ ./ktremotemgr set key2 value2   ← keyと値をセット
$ ./ktremotemgr inform  ← 入ってんの？
count: 2
size: 4195310
$ ./ktremotemgr get key1  ← GET！
value
||<
----
削除
>||
$ ./ktremotemgr remove key2 ← 削除
$ ./ktremotemgr inform      ← 減った？
count: 1
size: 4195271
$ ./ktremotemgr get key2    ← ないよね？
./ktremotemgr: DB::get failed: :1978: 3: logical inconsistency: DB: 7: no record: no record
||<
----
expiration できるんだよね？
>||
$ ./ktremotemgr set -xt 30 key3 value3 ← 30秒だけ覚えておいてね
$ ./ktremotemgr get -pt key3  ← -pt で削除予定のunix time
value3	1288941622
  ・
  ・
30秒後
  ・
$ ./ktremotemgr get -pt key3
./ktremotemgr: DB::get failed: :1978: 3: logical inconsistency: DB: 7: no record: no record
||<
<div style="text-align:left;font-size:50%;color:red;">消えてるぅ</div>
----
そういえば HTTP 話せるんだって？
>||
$ curl "http://localhost:1978/rpc/set?key=japn&value=tokyo"
$ curl "http://localhost:1978/rpc/get?key=japan"
ERROR	DB: 7: no record: no record
||<
<div style="text-align:left;font-size:50%;color:red;">え！？ なんで？？ログを追う(3分間。。。)</div>
>||
$ curl "http://localhost:1978/rpc/get?key=japn"
value	tokyo
||<
<div style="text-align:left;font-size:50%;color:red;">ですよねぇっ！！</div>
----
教訓:
人間は 何か一方に気を取られると
他方が 疎かに成りがちである。
----
気を取り直しまして
複数DB対応
>||
$ ./ktserver first.kch second.kch
||<

>||
$ ./ktremotemgr set -db first.kch key1 value_first
$ ./ktremotemgr set -db second.kch key1 value_second
||<
>||
$ ./ktremotemgr get -db first.kch key1
value_first
$ ./ktremotemgr get -db second.kch key1
value_second
||<
----
permanence !?
>||
ctrl + c (tycoon die)
$ ./ktserver first.kch second.kch ← さっき指定したファイル
./ktremotemgr get -db second.kch key1
value_second   ← 覚えててくれたんだね！！！
||<
----
以上、Kyoto Tycoon 触って見ましたでした。
----
感想：
- 揮発しないのでmemchachedよりも使い勝手がいいなぁ
- TTと違ってreplicationを落とした分モンモンとするなぁ
- 複数DB って良いよね
  (key の prefixで分けなくて良い)
----
次は redis あたりかな？
